{"version":3,"sources":["components/TodoItem.js","components/MarkAll.js","components/InfoPanel.js","components/Todo.js","App.js","serviceWorker.js","index.js"],"names":["TodoItem","props","removeClickedItem","bind","completedChanged","event","this","statusChanged","target","checked","item","id","removeItem","preventDefault","className","type","completed","onChange","title","href","onClick","Component","MarkAll","changed","React","InfoPanel","left","map","displayChanged","display","remove","Todo","state","input","items","nextId","newItemChanged","newItemKey","markAllChanged","removeClicked","key","trim","setState","newItem","value","itemId","filter","displayType","onKeyDown","every","length","some","App","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.b1899c30.chunk.js","sourcesContent":["import React, { Component } from \"react\";\nimport \"../TodoItem.css\";\n\nclass TodoItem extends Component {\n  constructor(props) {\n    super(props);\n    this.removeClickedItem = this.removeClickedItem.bind(this);\n    this.completedChanged = this.completedChanged.bind(this);\n  }\n\n  completedChanged(event) {\n    this.props.statusChanged(event.target.checked, this.props.item.id);\n  }\n\n  removeClickedItem(event) {\n    this.props.removeItem(this.props.item.id);\n    event.preventDefault();\n  }\n\n  render() {\n    return (\n      <p className=\"item\">\n        <label>\n          <input\n            type=\"checkbox\"\n            checked={this.props.item.completed}\n            onChange={this.completedChanged}\n          />\n          <span className={this.props.item.completed ? \"completed\" : \"active\"}>\n            {this.props.item.title}\n          </span>\n          <a href=\"{}\" onClick={this.removeClickedItem} className=\"removed\">\n            &times;\n          </a>\n        </label>\n      </p>\n    );\n  }\n}\n\nexport default TodoItem;\n","import React from \"react\";\n\nclass MarkAll extends React.Component {\n  render() {\n    return (\n      <input\n        type=\"checkbox\"\n        checked={this.props.checked}\n        onChange={event => this.props.changed(event.target.checked)}\n      />\n    );\n  }\n}\n\nexport default MarkAll;\n","import React, { Component } from \"react\";\nimport \"../InfoPanel.css\";\n\nclass InfoPanel extends Component {\n  render() {\n    return (\n      <section className=\"info-panel\">\n        <span className=\"items-left\">{this.props.left} items left</span>\n        <span className=\"display\">\n          {[\"all\", \"completed\", \"active\"].map(item => (\n            <span\n              onClick={() => this.props.displayChanged(item)}\n              className={this.props.display === item ? \"selected\" : \"\"}\n            >\n              {item}\n            </span>\n          ))}\n        </span>\n        {this.props.completed ? <a href=\"{}\" onClick={(event) => {\n          event.preventDefault();\n          this.props.remove();\n        }}>Clear completed</a> : null}\n      </section>\n    );\n  }\n}\n\nexport default InfoPanel;\n","import React, { Component } from \"react\";\nimport \"../todo.css\";\nimport TodoItem from \"./TodoItem\";\nimport MarkAll from \"./MarkAll\";\nimport InfoPanel from \"./InfoPanel\";\n\nclass Todo extends Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      input: \"\",\n      items: [],\n      nextId: 0,\n      display: 'all'\n    };\n    this.newItemChanged = this.newItemChanged.bind(this);\n    this.newItemKey = this.newItemKey.bind(this);\n    this.statusChanged = this.statusChanged.bind(this);\n    this.removeItem = this.removeItem.bind(this);\n    this.markAllChanged = this.markAllChanged.bind(this);\n    this.displayChanged = this.displayChanged.bind(this);\n    this.removeClicked = this.removeClicked.bind(this);\n  }\n\n  newItemKey(event) {\n    if (event.key === \"Enter\" && this.state.input.trim() !== \"\") {\n      this.setState(state => {\n        const newItem = {\n          title: state.input,\n          id: state.nextId,\n          completed: false\n        };\n\n        const newItems = [...state.items, newItem];\n\n        return {\n          items: newItems,\n          nextId: state.nextId + 1,\n          input: \"\"\n        };\n      });\n    }\n  }\n\n  newItemChanged(event) {\n    this.setState({\n      input: event.target.value\n    });\n  }\n\n  removeItem(itemId) {\n    this.setState(state => {\n      return {\n        items: state.items.filter(item => item.id !== itemId)\n      };\n    });\n  }\n\n  markAllChanged(checked) {\n    this.setState(state => {\n      return {\n        items: state.items.map(item => {\n          return {\n            title: item.title,\n            id: item.id,\n            completed: checked\n          };\n        })\n      };\n    });\n  }\n\n  statusChanged(completed, itemId) {\n    this.setState(state => {\n      return {\n        items: state.items.map(item =>\n          item.id === itemId\n            ? {\n                title: item.title,\n                id: item.id,\n                completed: completed\n              }\n            : item\n        )\n      };\n    });\n  }\n\n  displayChanged(displayType) {\n    this.setState({ display: displayType });\n  }\n\n  removeClicked() {\n    this.setState((state) => {\n      return {\n        items: state.items.filter(item => !item.completed)\n      }\n    })\n  }\n\n  render() {\n    return (\n      <section className=\"todo\">\n        <input\n          type=\"text\"\n          value={this.state.input}\n          className=\"new-item\"\n          onChange={this.newItemChanged}\n          onKeyDown={this.newItemKey}\n        />\n        <MarkAll\n          checked={this.state.items.every(item => item.completed)}\n          changed={this.markAllChanged}\n        />\n        <section className=\"items\">\n          {this.state.items\n            .filter(\n              item =>\n                this.state.display === \"all\" ||\n                (this.state.display === \"completed\" && item.completed) ||\n                (this.state.display === \"active\" && !item.completed)\n            )\n            .map(item => (\n              <TodoItem\n                key={item.id}\n                item={item}\n                statusChanged={this.statusChanged}\n                removeItem={this.removeItem}\n              />\n            ))}\n        </section>\n        <InfoPanel\n          left={\"\" + this.state.items.filter(item => !item.completed).length}\n          display={this.state.display}\n          displayChanged={this.displayChanged}\n          completed={this.state.items.some((item) => item.completed)}\n          remove={this.removeClicked}\n        />\n      </section>\n    );\n  }\n}\n\nexport default Todo;\n","import React from 'react';\nimport './App.css';\nimport Todo from './components/Todo';\n\nfunction App() {\n  return (\n      <Todo />\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}